import{_ as o,p,q as c,s as n,t as e,R as s,Y as t,n as l}from"./framework-c56ab46b.js";const i={},u=t('<h3 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h3><p>在现代前端开发中，用户交互体验的提升一直是开发者关注的重点。想象一下，当用户在网页上选中文本时，不仅可以复制，还能直接保存为图片，或者一键生成 <code>Markdown</code> 格式的文本。这一切都可以通过 <code>HTML2Canvas</code> 和 <code>Turndown</code> 两个强大的 <code>JavaScript</code> 库轻松实现。本篇博客将向你展示如何在前端实现这些功能，提升用户的互动体验。</p><h3 id="功能点" tabindex="-1"><a class="header-anchor" href="#功能点" aria-hidden="true">#</a> 功能点</h3><ul><li><p><strong>复制为图片</strong></p><p><img src="https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202408201447760.gif" alt="复制为图片后"></p><p>用户可以通过选择网页上的文本内容，然后点击弹出的选项，将其转换为图片并复制到剪贴板。这项功能使用了<code>HTML2Canvas</code>库来实现，它可以将网页元素渲染为<code>Canvas</code>对象，并进一步转换为图片。</p></li><li><p><strong>保存为图片</strong></p><p><img src="https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202408201447830.gif" alt="保存为图片"></p><p>除了复制，用户还可以将生成的图片保存到本地。通过<code>HTML2Canvas</code>的<code>toDataURL</code>方法，我们可以生成一个<code>Base64</code>格式的图片，并使用浏览器的下载功能将其保存。</p></li><li><p><strong>复制为<code>Markdown</code></strong></p><p><img src="https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202408201448157.gif" alt="复制为Markdown后"></p><p>对于需要纯文本的用户来说，将网页内容转换为<code>Markdown</code>格式非常实用。我们使用<code>Turndown</code>库来实现这一功能，它能够将<code>HTML</code>格式的内容快速转换为<code>Markdown</code>文本，并直接复制到剪贴板。</p></li></ul><h3 id="使用技术" tabindex="-1"><a class="header-anchor" href="#使用技术" aria-hidden="true">#</a> 使用技术</h3><h4 id="html2canvas" tabindex="-1"><a class="header-anchor" href="#html2canvas" aria-hidden="true">#</a> <code>html2canvas</code></h4>',6),d={href:"https://html2canvas.hertzen.com/",target:"_blank",rel:"noopener noreferrer"},r=n("code",null,"html2canvas",-1),k=n("code",null,"PNG",-1),h=t('<h5 id="配置项" tabindex="-1"><a class="header-anchor" href="#配置项" aria-hidden="true">#</a> 配置项</h5><table><thead><tr><th><strong>属性名</strong></th><th><strong>默认值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>useCORS</code></td><td><code>false</code></td><td>是否尝试使用 <code>CORS</code> 从服务器加载图片</td></tr><tr><td><code>allowTaint</code></td><td><code>false</code></td><td>是否允许不同源的图片污染画布</td></tr><tr><td><code>scale</code></td><td><code>window.devicePixelRatio</code></td><td>用于渲染的比例，默认为浏览器设备像素比率</td></tr></tbody></table><h4 id="turndown" tabindex="-1"><a class="header-anchor" href="#turndown" aria-hidden="true">#</a> <code>Turndown</code></h4>',3),v={href:"https://github.com/mixmark-io/turndown",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"Turndown",-1),g=n("code",null,"HTML",-1),b=n("code",null,"Markdown",-1),_=n("code",null,"JavaScript",-1),w=n("code",null,"HTML",-1),f=n("code",null,"Markdown",-1),y=n("h4",{id:"window-getcomputedstyle",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#window-getcomputedstyle","aria-hidden":"true"},"#"),s(),n("code",null,"Window.getComputedStyle()")],-1),C={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"Window.getComputedStyle()",-1),M=n("h4",{id:"window-getselection",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#window-getselection","aria-hidden":"true"},"#"),s(),n("code",null,"Window.getSelection")],-1),x={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Selection",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"Selection",-1),T=n("h4",{id:"selection",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#selection","aria-hidden":"true"},"#"),s(),n("code",null,"Selection")],-1),A=n("p",null,[n("code",null,"Selection"),s(" 对象表示用户选择的文本范围或插入符号的当前位置。它代表页面中的文本选区，可能横跨多个元素。文本选区由用户拖拽鼠标经过文字而产生。")],-1),R=n("code",null,"Selection",-1),B={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Range",target:"_blank",rel:"noopener noreferrer"},D=n("code",null,"ranges",-1),I=t('<blockquote><p>“拖蓝”是中文网络用语，指用户用鼠标选择文本时，文本背景变成蓝色的现象。大多数操作系统和浏览器在用户选择文本时，会将选中的文本背景变为蓝色，以表示该区域被选中。这个过程被称为“拖蓝”或“拖选”，通常用来描述用户通过鼠标选择文本的行为，例如在网页上选择文字后进行复制或高亮操作。</p></blockquote><h5 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h5><ul><li><p><code>isCollapsed</code></p><p>返回一个布尔值，用于判断选区的起始点和终点是否在同一个位置。</p></li><li><p><code>rangeCount</code></p><p>返回该选区所包含的连续范围的数量。</p></li></ul><h5 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h5><ul><li><p><code>getRangeAt</code></p><p>返回一个包含当前选区内容的区域对象。</p><blockquote><p>在代码中，<code>const range = selection.getRangeAt(0)</code> 中的 <code>0</code> 是用来获取当前用户选择的文本范围 (<code>range</code>) 列表中的第一个范围对象。通常情况下，当用户在网页上选择文本时，只会创建一个 <code>Range</code> 对象。因此，使用 <code>getRangeAt(0)</code> 来获取这个范围对象是最常见和安全的做法。</p><p>在绝大多数的浏览器中，用户只能一次选择一个连续的文本范围（即一个 <code>Range</code> 对象）。因此，<code>getRangeAt(0)</code> 可以确保我们获取到当前的选区。如果用户有多个选区，<code>getRangeAt(0)</code> 仅获取第一个。</p><p>通常情况下，不会使用 <code>addRange</code> 添加多个 <code>Range</code> 对象到选区，除非你正在编写一个允许非连续选择的自定义逻辑。</p></blockquote></li></ul><h4 id="range" tabindex="-1"><a class="header-anchor" href="#range" aria-hidden="true">#</a> <code>Range</code></h4><p><strong><code>Range</code></strong> 接口表示一个包含节点与文本节点的一部分的文档片段。</p><h5 id="方法-1" tabindex="-1"><a class="header-anchor" href="#方法-1" aria-hidden="true">#</a> 方法</h5>',8),L=n("p",null,[n("code",null,"getBoundingClientRect")],-1),j={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMRect",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"DOMRect",-1),z=n("code",null,"Range",-1),N=n("p",null,[n("code",null,"cloneContents")],-1),W=n("code",null,"Range",-1),P={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/DocumentFragment",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"文档片段",-1),O=t(`<h3 id="核心实现" tabindex="-1"><a class="header-anchor" href="#核心实现" aria-hidden="true">#</a> 核心实现</h3><p>在实现过程中，首先需要监听用户的文本选择操作。当用户完成选择时，展示一个操作按钮，提供“复制为图片”、“保存为图片”以及“复制为 <code>Markdown</code>”的选项。以下是核心代码段：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法：将选中内容渲染为图片并复制到剪贴板</span>
<span class="token keyword">const</span> <span class="token function-variable function">copyAsImage</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hiddenContent<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    hiddenContent<span class="token punctuation">.</span>value<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;block&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 显示隐藏内容</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> canvas <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">HTML2CanvasService</span><span class="token punctuation">(</span>hiddenContent<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">useCORS</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> canvas<span class="token punctuation">.</span><span class="token function">toBlob</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token string">&#39;image/png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>blob<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">ClipboardItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;image/png&#39;</span><span class="token operator">:</span> blob <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ElMessage<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&#39;图片已复制到剪贴板&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;转换为图片时出错&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      hiddenContent<span class="token punctuation">.</span>value<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 重新隐藏内容</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一段代码展示了如何使用 <code>HTML2Canvas</code> 将选中的网页内容渲染为图片并复制到剪贴板。用户可以轻松地将网页上的任意选中内容保存为图片并分享。</p><h4 id="保存图片到本地" tabindex="-1"><a class="header-anchor" href="#保存图片到本地" aria-hidden="true">#</a> 保存图片到本地</h4><p>通过稍微调整，我们还可以将选中的内容保存为本地 <code>PNG</code> 文件。这对于需要将内容进行本地存档的用户来说非常有用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法：将选中内容保存为图片</span>
<span class="token keyword">const</span> <span class="token function-variable function">saveAsImage</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hiddenContent<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    hiddenContent<span class="token punctuation">.</span>value<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;block&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> canvas <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">HTML2CanvasService</span><span class="token punctuation">(</span>hiddenContent<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">useCORS</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> image <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token string">&#39;image/png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      link<span class="token punctuation">.</span>href <span class="token operator">=</span> image<span class="token punctuation">;</span>
      link<span class="token punctuation">.</span>download <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">screenshot_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.png</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      ElMessage<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&#39;图片已保存&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ElMessage<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;保存图片时出错&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      hiddenContent<span class="token punctuation">.</span>value<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，我们使用了 <code>canvas.toDataURL</code> 方法将 <code>Canvas</code> 对象转换为 <code>Base64</code> 编码的图片数据，然后通过动态创建一个 <code>&lt;a&gt;</code> 标签实现文件下载。</p><h4 id="markdown-转换" tabindex="-1"><a class="header-anchor" href="#markdown-转换" aria-hidden="true">#</a> <code>Markdown</code> 转换</h4><p>我们可以通过以下代码实现选中文本的 <code>Markdown</code> 转换，并复制到剪贴板：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法：将选中内容转换为 Markdown</span>
<span class="token keyword">const</span> <span class="token function-variable function">copyAsMarkdown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>hiddenContent<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> turnDownService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TurnDownService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> markdownContent <span class="token operator">=</span> turnDownService<span class="token punctuation">.</span><span class="token function">turndown</span><span class="token punctuation">(</span>hiddenContent<span class="token punctuation">.</span>value<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>
    navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>markdownContent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      ElMessage<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">&#39;Markdown 已复制到剪贴板&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码展示了如何使用 <code>Turndown</code> 将 HTML 内容转换为 <code>Markdown</code> 格式，并通过 <code>navigator.clipboard.writeText</code> 将结果复制到剪贴板中，用户可以方便地将其粘贴到任何 <code>Markdown</code> 编辑器中。</p><h3 id="项目后续迭代" tabindex="-1"><a class="header-anchor" href="#项目后续迭代" aria-hidden="true">#</a> 项目后续迭代</h3><p>为了提升该工具的实用性，我计划进行以下几个方面的迭代：</p><ul><li><strong><code>Tampermonkey[油猴]</code>插件：</strong> 正在开发中，目标是将该功能集成到<code>Tampermonkey</code>脚本中，方便用户在各种网页中使用。</li><li><strong>谷歌浏览器插件：</strong> 也在进行中，最终希望通过浏览器扩展的形式，让用户能更轻松地访问和使用该工具。</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>通过这篇博客，我们了解了如何使用<code>HTML2Canvas</code>和<code>Turndown</code>实现将网页内容转换为图片和<code>Markdown</code>格式的功能。该工具不仅提升了用户体验，也为开发者提供了一个轻量级的解决方案。如果你对这类功能有需求，欢迎尝试并进一步改进。</p><hr><p>希望这个博客内容能够满足你的需求！</p>`,19),q={href:"https://github.com/chnjames/essayCollection/blob/main/Vue/%E5%89%8D%E7%AB%AF%E8%BD%BB%E6%9D%BE%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9%E8%BD%AC%E6%8D%A2%EF%BC%9A%E4%B8%80%E9%94%AE%E5%A4%8D%E5%88%B6%E3%80%81%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87%E5%8F%8A%E7%94%9F%E6%88%90%20Markdown.md",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"GitHub",-1);function G(U,J){const a=l("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[n("a",d,[r,e(a)]),s(" 是一个强大的工具，可以将网页元素渲染为图片。通过它，我们可以轻松地将选中的网页内容转换为 "),k,s(" 图片，并保存或复制到剪贴板。")]),h,n("p",null,[n("a",v,[m,e(a)]),s(" 是一个用于将 "),g,s(" 转换为 "),b,s(" 的 "),_,s(" 库。它通常用于将富文本内容从网页或其他 "),w,s(" 格式转换为纯文本 "),f,s(" 格式，以便在不同平台上显示或存储。")]),y,n("p",null,[n("a",C,[E,e(a)]),s("方法返回一个对象，该对象在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有 CSS 属性的值。私有的 CSS 属性值可以通过对象提供的 API 或通过简单地使用 CSS 属性名称进行索引来访问。")]),M,n("p",null,[s("返回一个 "),n("a",x,[S,e(a)]),s(" 对象，表示用户选择的文本范围或光标的当前位置。")]),T,A,n("p",null,[R,s(" 对象所对应的是用户所选择的 "),n("a",B,[D,e(a)]),s("（区域），俗称拖蓝。默认情况下，该函数只针对一个区域。")]),I,n("ul",null,[n("li",null,[L,n("p",null,[s("返回一个 "),n("a",j,[H,e(a)]),s(" 对象，其绑定了 "),z,s(" 的整个内容。")])]),n("li",null,[N,n("p",null,[s("返回一个复制 "),W,s(" 中所有节点的"),n("a",P,[F,e(a)]),s("。")])])]),O,n("p",null,[s("完整代码➡️"),n("a",q,[V,e(a)])])])}const $=o(i,[["render",G],["__file","EffortlessWebContentTool.html.vue"]]);export{$ as default};
