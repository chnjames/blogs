import{_ as a,p as r,q as l,s as e,R as t,t as c,Y as d,n as i}from"./framework-c56ab46b.js";const n={},s=d('<blockquote><p>超长内容预警，建议收藏后阅。</p></blockquote><p><code>Flutter</code> 和 <code>React Native</code> 是跨平台应用程序开发的两个领先工具。了解它们的差异以及各自的最佳用例。</p><p><img src="https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202410151713898.png" alt="cover"></p><h2 id="什么是flutter" tabindex="-1"><a class="header-anchor" href="#什么是flutter" aria-hidden="true">#</a> 什么是<code>Flutter</code>？</h2><p><code>Flutter</code> 是 <code>Google</code> 于 2018 年发布的用户界面 (<code>UI</code>) 软件开发套件。<code>Flutter</code> 可让您为多种平台和操作系统构建跨平台应用程序。</p><h2 id="什么是-react-native" tabindex="-1"><a class="header-anchor" href="#什么是-react-native" aria-hidden="true">#</a> 什么是 <code>React Native</code>？</h2><p><code>React Native</code> 是 <code>Facebook</code> 创建并于 2015 年发布的移动开发框架。您可以使用 <code>React Native</code> 开发移动、<code>Web</code> 和桌面应用程序。</p><h2 id="react-native-和-flutter-最大的区别" tabindex="-1"><a class="header-anchor" href="#react-native-和-flutter-最大的区别" aria-hidden="true">#</a> <code>React Native</code> 和 <code>Flutter</code> 最大的区别</h2><p><code>Flutter</code> 在自己的画布上渲染所有组件。</p><p><code>React Native</code> 将 <code>JavaScript</code> 组件转换为原生组件。</p>',10),h={href:"https://blog.prototypr.io/new-in-ios-15-for-product-designers-design-engineers-aa504e3374f8",target:"_blank",rel:"noopener noreferrer"},u=e("code",null,"iOS 16",-1),p=e("code",null,"Flutter",-1),_=e("code",null,"React Native",-1),v=d('<p>根据不同的立场，这可能是一件好事或坏事。例如，如果你希望你的组件保持原样，<code>Flutter</code>的方法将满足你的需求。但是如果你希望你的应用程序能够跟上最新的本地组件设计，那么<code>React Native</code>就是最好的选择——在<code>React Native</code>中，这种更新会自动进行且免费。此外，如果你不想让<code>React Native</code>应用程序中的组件遵循新的<code>iOS</code>设计（因为你想保留风格），你可以关闭自动组件更新。</p><p>但是要在<code>Flutter</code>中包含最新的本地组件，你必须手动更新应用程序。</p><h2 id="flutter-会继续超越-react-native-吗-2024更新" tabindex="-1"><a class="header-anchor" href="#flutter-会继续超越-react-native-吗-2024更新" aria-hidden="true">#</a> <code>Flutter</code> 会继续超越 <code>React Native</code> 吗？[2024更新]</h2><p>在2023年版的 <code>Stack Overflow</code> 调查中，<code>Flutter</code> 在开发者（所有受访者）中仍然高于 <code>React Native</code>。</p><p><img src="https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202410151713208.png" alt="FVSRN2023"></p>',5),g={href:"https://survey.stackoverflow.co/2023/#most-popular-technologies-misc-tech",target:"_blank",rel:"noopener noreferrer"},f=d('<p>2022年年度 <code>Stack Overflow</code> 调查结果显示，使用这些技术进行商业项目及其他用途的开发者在 <code>Flutter</code> 与 <code>React Native</code> 的争论中竞争激烈。</p><p><img src="https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202410151713781.png" alt="FVSRN2022"></p><p>从 <code>Google Trends</code> 的结果来看，这两者之间的激烈竞争依然持续。</p><p>在对 <code>React Native</code> 进行两年的追赶后，<code>Flutter</code> 在2020年4月成为全球更常被搜索的查询，并在2024年继续保持这一趋势。</p>',4),m=e("img",{src:"https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202410151713086.png",alt:"worldwide"},null,-1),F={href:"https://trends.google.com/trends/explore?date=2018-01-01%202024-10-01&q=%2Fg%2F11h03gfxy9,%2Fg%2F11f03_rzbg",target:"_blank",rel:"noopener noreferrer"},N=e("p",null,[t("然而，在美国，这场争夺战依然激烈，火药味十足，尤其是从2021年1月开始的趋势曲线来看。目前，"),e("code",null,"Flutter"),t(" 在一定程度上领先于"),e("code",null,"React Native"),t("。")],-1),R=e("img",{src:"https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202410151713586.png",alt:"America"},null,-1),b={href:"https://trends.google.com/trends/explore?date=2018-01-01%202024-10-01&geo=US&q=%2Fg%2F11h03gfxy9,%2Fg%2F11f03_rzbg",target:"_blank",rel:"noopener noreferrer"},S=e("p",null,[e("img",{src:"https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202410151716934.png",alt:"china"})],-1),I={href:"https://trends.google.com/trends/explore?date=2018-01-01%202024-10-01&geo=CN&q=%2Fg%2F11h03gfxy9,%2Fg%2F11f03_rzbg",target:"_blank",rel:"noopener noreferrer"},x=e("p",null,[e("code",null,"Statista"),t(" 的最新研究将"),e("code",null,"Flutter"),t(" 列为 2023 年领先的跨平台移动开发框架。"),e("code",null,"Flutter"),t(" 超过 "),e("code",null,"React Native"),t(" 11%（"),e("code",null,"Flutter"),t(" 为 46%，"),e("code",null,"React Native"),t(" 为 35%）。尽管如此，可以公平地说这两种技术几乎同样受欢迎。")],-1),w=e("img",{src:"https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202410151713379.png",alt:"Statista19-23"},null,-1),k={href:"https://www.statista.com/statistics/869224/worldwide-software-developer-working-hours/",target:"_blank",rel:"noopener noreferrer"},D=e("p",null,[t("然而，其他来源对 "),e("code",null,"Flutter"),t(" 和 "),e("code",null,"React Native"),t(" 的整体受欢迎程度提供了略有不同的看法。以下是使用特定引擎的免费移动应用和游戏的百分比展示。显然，当考虑到游戏时，"),e("code",null,"Flutter"),t(" 和 "),e("code",null,"React Native"),t(" 的排名较低也就不足为奇，因为它们并不是构建游戏的最优引擎。")],-1),A=e("p",null,[e("img",{src:"https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202410151717806.png",alt:"Statista"})],-1),O={href:"https://www.statista.com/statistics/1326121/top-app-dev-engines-worldwide/",target:"_blank",rel:"noopener noreferrer"},J=d('<blockquote><p>由于某些原因，最新的数据暂时无法获取，因此此处提供的数据并非最新信息。</p></blockquote><p>是什么让这两种技术如此受欢迎呢？让我们来看看。</p><h2 id="flutter-与-react-native-比较" tabindex="-1"><a class="header-anchor" href="#flutter-与-react-native-比较" aria-hidden="true">#</a> <code>Flutter</code> 与 <code>React Native</code>：比较</h2><h3 id="学习曲线" tabindex="-1"><a class="header-anchor" href="#学习曲线" aria-hidden="true">#</a> 学习曲线</h3><p><code>React Native</code> 相较于 <code>Flutter</code> 的优势在于它使用 <code>JavaScript</code> ——全球最受欢迎的编程语言。</p><p>然而，<code>JavaScript</code> 不一定是最简单和最令人兴奋的编程语言。就像木匠喜欢使用高质量的工具一样，开发者也喜欢使用有趣且方便的编程语言——这使得工作更加愉快和高效。</p><p>那么，<code>Flutter</code> 和 <code>React Native</code> 哪个更容易学习呢？</p><p>从开发者的角度来看，<code>Flutter</code> 比 <code>React Native</code> 更容易学习。</p><p>正如我们之前提到的，<code>JavaScript</code> 远不是最友好的编程语言。它包含类中的类和各种其他怪癖，有时让开发者难以理解 <code>JavaScript</code> 的工作原理，这无谓地增加了编码的复杂性。</p>',9),j=e("code",null,"React Native",-1),M=e("code",null,"React Native",-1),G={href:"https://reactnative.dev/showcase",target:"_blank",rel:"noopener noreferrer"},E=d("<p><code>Flutter</code> 比 <code>React Native</code> 更友好于开发者。<code>Dart</code> 作为编程语言，比 <code>JavaScript</code> 更易于使用和理解。<code>Dart</code> 在范式和用法上也更接近于用于原生移动应用开发的编程语言。</p><p>因此，<code>Flutter</code> 框架在2022年 <code>Stack Overflow</code> 调查的“最受欢迎技术 — 其他框架和库”类别中几乎名列前茅。</p>",2),V=e("img",{src:"https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202410151717025.png",alt:"StackOverflow2022"},null,-1),q={href:"https://survey.stackoverflow.co/2022/#most-loved-dreaded-and-wanted-misc-tech-love-dread",target:"_blank",rel:"noopener noreferrer"},y=d('<h3 id="命令行界面-cli" tabindex="-1"><a class="header-anchor" href="#命令行界面-cli" aria-hidden="true">#</a> 命令行界面 (<code>CLI</code>)</h3><p><code>Flutter</code> 还提供了一个命令行界面（<code>CLI</code>），其中包含如 <code>Flutter Doctor</code> 等工具，帮助设置所选的 <code>IDE</code> 以及 <code>iOS</code> 或 <code>Android</code> 开发环境。<code>Flutter Doctor</code> 会检查本地机器上已安装的工具及其配置。<code>Flutter CLI</code> 与 <code>Flutter Doctor</code> 结合使用，使得为新的 <code>Flutter</code> 移动应用准备环境变得更加顺畅。</p>',2),W=e("code",null,"React Native",-1),C=e("code",null,"React Native",-1),U=e("code",null,"React Native",-1),T=e("code",null,"Expo",-1),L={href:"https://expo.io/",target:"_blank",rel:"noopener noreferrer"},K=e("code",null,"Expo",-1),P=e("code",null,"React Native",-1),B=d('<p>使用 <code>Expo</code> 客户端，您可以在构建应用时直接在手机上查看它们（无需通过 <code>Android Studio</code> 或 <code>Xcode</code>）。<code>Expo CLI</code> 通过提供开发、日志、部署、迭代、编译等工具，简化了新 <code>React Native</code> 应用的创建过程。</p><h3 id="flutter-与-react-native-性能比较" tabindex="-1"><a class="header-anchor" href="#flutter-与-react-native-性能比较" aria-hidden="true">#</a> <code>Flutter</code> 与 <code>React Native</code> 性能比较</h3><p><code>React Native</code> 的架构需要一个 <code>JavaScript</code> 桥接，以便在 <code>JavaScript</code> 和原生用户界面组件以及设备特定元素（如蓝牙、传感器、相机等）之间进行交互。因此，由于基于桥接的通信，<code>React Native</code> 的性能稍逊于 <code>Flutter</code>。不过，当这两者都在熟练的开发者手中使用时，都能产生高性能的应用程序。</p><p>2023 年 12 月更新：</p><h4 id="jsi-react-native" tabindex="-1"><a class="header-anchor" href="#jsi-react-native" aria-hidden="true">#</a> <code>JSI (React Native)</code></h4>',5),z=e("code",null,"React Native",-1),H={href:"https://reactnative.dev/docs/the-new-architecture/landing-page#fast-javascriptnative-interfacing",target:"_blank",rel:"noopener noreferrer"},X=e("code",null,"JSI",-1),Y=e("code",null,"JavaScript",-1),Q=e("code",null,"JSI",-1),Z=e("code",null,"JavaScript",-1),$=e("code",null,"React Native",-1),ee=d('<h4 id="impeller-flutter" tabindex="-1"><a class="header-anchor" href="#impeller-flutter" aria-hidden="true">#</a> <code>Impeller (Flutter)</code></h4><p><code>Flutter</code> 不再依赖桥接。直到2023年中，<code>Flutter</code> 的核心图形引擎 <code>Skia</code> 负责在用户与应用互动时将 <code>UI</code> 编译为原生代码。自那时起，<code>Flutter</code> 已转向 <code>Impeller</code>。与 <code>Skia</code> 不同，<code>Impeller</code> 的设计旨在优化 <code>GPU</code> 的使用，提升 <code>UI</code> 的性能和效率。这个新的渲染引擎利用了 <code>Metal</code> 和 <code>Vulkan</code> 等先进的 <code>GPU API</code>，提供了更高效的渲染、更低的能耗和更好的帧率。这一举措表明 <code>Flutter</code> 致力于利用现代硬件来提升应用体验。</p><h3 id="调试" tabindex="-1"><a class="header-anchor" href="#调试" aria-hidden="true">#</a> 调试</h3><p>在 <code>React Native</code> 中，调试可能会存在问题，尤其是当特定的异常或错误来源于应用程序的原生部分时。例如，错误可能出现在 <code>JavaScript</code> 方面：在 <code>React Native</code> 或应用代码中。在原生方面，错误也可能来自 <code>React Native</code> 以及第三方库。</p>',4),te=e("code",null,"React Native",-1),oe={href:"https://fbflipper.com/",target:"_blank",rel:"noopener noreferrer"},ce=e("code",null,"Flipper",-1),de=e("p",null,[e("img",{src:"https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202410151717576.png",alt:"Flipper"})],-1),ae=e("code",null,"Flipper",-1),re=e("code",null,"Flipper",-1),le=e("code",null,"React Native",-1),ie=e("code",null,"JavaScript",-1),ne={href:"https://fbflipper.com/",target:"_blank",rel:"noopener noreferrer"},se=e("code",null,"Flutter",-1),he=e("code",null,"Android Studio",-1),ue=e("code",null,"Visual Studio",-1),pe=e("code",null,"DevTools",-1),_e=e("code",null,"Chrome",-1),ve=e("code",null,"OEM Debugger",-1),ge={href:"https://docs.flutter.dev/tools/devtools/inspector",target:"_blank",rel:"noopener noreferrer"},fe=e("code",null,"Inspector",-1),me=e("p",null,[e("img",{src:"https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202410151717191.png",alt:"devtoolsflutter"})],-1),Fe={href:"https://docs.flutter.dev/tools/devtools/inspector",target:"_blank",rel:"noopener noreferrer"},Ne=e("h3",{id:"包和库",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#包和库","aria-hidden":"true"},"#"),t(" 包和库")],-1),Re=e("code",null,"React Native",-1),be=e("code",null,"Flutter",-1),Se=e("code",null,"Node",-1),Ie={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},xe=e("code",null,"npm",-1),we=e("code",null,"npm",-1),ke=d("<p><code>npm</code> 已经存在很久了。尽管它主要面向 <code>Web</code> 开发（它是 <code>JavaScript</code> 的王国），但许多库可以很容易地适配到 <code>React Native</code> 应用中。</p><p>但是 <code>npm</code> 有一个警告——许多可用的 <code>JavaScript</code> 库质量较低，几乎无法在生产环境中使用，因此在选择应用程序库时必须小心。</p>",2),De=e("code",null,"Flutter/Dart",-1),Ae={href:"https://pub.dev/",target:"_blank",rel:"noopener noreferrer"},Oe=e("code",null,"pub-dev",-1),Je=e("p",null,[t("然而，当我们在 "),e("code",null,"GitHub"),t(" 上查找存储库时，快速搜索显示这两种技术的生态系统在规模上相似。")],-1),je=e("code",null,"Flutter",-1),Me={href:"https://github.com/search?q=Flutter&type=repositories",target:"_blank",rel:"noopener noreferrer"},Ge=e("code",null,"React Native",-1),Ee={href:"https://github.com/search?q=React+Native&type=repositories",target:"_blank",rel:"noopener noreferrer"},Ve=e("code",null,"Flutter",-1),qe=e("code",null,"Flutter",-1),ye=e("code",null,"React Native",-1),We=d('<h3 id="成熟度" tabindex="-1"><a class="header-anchor" href="#成熟度" aria-hidden="true">#</a> 成熟度</h3><p>技术的成熟度通常体现在广泛的积极采用和长期支持上。<code>React Native</code> 拥有大量高质量的第三方库，并已被许多知名品牌的技术栈所采用。</p><p>不过，<code>Flutter</code> 正在迅速赶上，我们可以说这两种技术都已成熟到足以安全投入生产使用。</p><h3 id="文档" tabindex="-1"><a class="header-anchor" href="#文档" aria-hidden="true">#</a> 文档</h3><p>尽管 <code>React Native</code> 存在的时间比 <code>Flutter</code> 长得多，但 <code>Flutter</code> 的文档比 <code>React Native</code> 更完善、更深入，并且更易于浏览。</p><p>例如，<code>Flutter</code> 的文档中为不同技术背景和经验水平的开发者提供了“入门”部分。</p>',6),Ce=e("img",{src:"https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202410151717419.png",alt:"flutter-learn"},null,-1),Ue=e("em",null,"Flutter 的“入门”部分。资料来源：",-1),Te={href:"https://flutter.dev/docs/get-started/install",target:"_blank",rel:"noopener noreferrer"},Le=e("em",null,"Flutter",-1),Ke=e("p",null,[t("因此，想要开始使用 "),e("code",null,"Flutter"),t(" 和 "),e("code",null,"React Native"),t("开发者或希望学习如何在移动应用中排列组件的 "),e("code",null,"Web"),t(" 开发者可以轻松找到他们需要的信息。")],-1),Pe=e("p",null,[e("code",null,"React Native"),t(" 的文档在主题组织和深度上不如 "),e("code",null,"Flutter"),t(" 的文档。")],-1),Be=e("img",{src:"https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202410151717528.png",alt:"react-native-learn"},null,-1),ze=e("em",null,"React Native 的“基础知识”部分。来源：",-1),He={href:"https://reactnative.dev/docs/getting-started",target:"_blank",rel:"noopener noreferrer"},Xe=e("em",null,"React Native",-1),Ye=d('<p>然而，在 <code>Stack Overflow</code> 和 <code>Reddit</code> 上有大量主题，开发者们在这里互相帮助解决许多复杂问题。</p><h3 id="开发者社区" tabindex="-1"><a class="header-anchor" href="#开发者社区" aria-hidden="true">#</a> 开发者社区</h3><p><code>Flutter</code>和<code>React Native</code>都有蓬勃发展的社区，每年都会举办大量的会议、黑客马拉松和活动。</p><p>社区的规模以及与专家交流和获取帮助解决开发问题的渠道的重要性不容忽视。这两个框架都有相当强大的社区支持渠道，大多数问题，包括复杂问题，都会得到解答。</p><p>以下是对每个工具最受欢迎的沟通渠道的更详细比较：</p><p><strong>2023 年 2 月的数据：</strong></p><p><img src="https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202410151717653.png" alt="scope"><em>2023 年 2 月 Flutter 和 React Native 的沟通渠道和社区规模比较。</em></p><p>如您所见，<code>Flutter</code>的社区在<code>GitHub</code>上关闭的问题数量远超过<code>React Native</code>。这一点很重要，因为错误可能会显著降低应用的用户体验，而当问题长时间未解决时，错误将持续存在。</p><h3 id="集成开发环境-ide" tabindex="-1"><a class="header-anchor" href="#集成开发环境-ide" aria-hidden="true">#</a> 集成开发环境（<code>IDE</code>）</h3><p>您可以选择在简单的记事本中编写移动应用代码，但在专用的集成开发环境（<code>IDE</code>）中开发会更加愉快和高效，这些<code>IDE</code>通常配备内置调试器、代码编辑器、构建自动化工具、编译器以及其他实用的开发工具。</p><p><code>Flutter</code>允许开发者选择他们的<code>IDE</code>，例如<code>Android Studio</code>或<code>Visual Studio</code>。在<code>React Native</code>中，开发者可以使用<code>Visual Studio</code>或<code>WebStorm</code>等工具。</p><p>对于有一些原生<code>Android</code>开发经验的开发者来说，使用<code>Flutter</code>可能会更容易，因为他们对<code>Android Studio</code>会比较熟悉，而<code>Android Studio</code>非常友好于开发者。</p><h3 id="跨平台能力" tabindex="-1"><a class="header-anchor" href="#跨平台能力" aria-hidden="true">#</a> 跨平台能力</h3><p><code>React Native</code>允许开发者为<code>iOS</code>和<code>Android</code>以及通过<code>React</code>构建<code>Web</code>应用。最近，微软推出了一个出色的项目，允许使用<code>React Native</code>编写桌面应用（适用于<code>macOS</code>和<code>Windows</code>）。</p><p>在<code>React Native 0.71</code>版本中（最初遇到了一些问题），团队专注于通过默认使用<code>TypeScript</code>、架构更新以及通过<code>Flexbox Gap</code>进行布局管理来改善跨平台开发者体验。此次发布还引入了受<code>Web</code>启发的样式和可访问性属性，以使<code>React Native</code>的<code>API</code>在各个平台上保持一致。得益于与众多插件和第三方库的兼容性，<code>React Native</code>简化了跨平台应用的开发，使开发者能够快速集成不同的功能。</p><p>使用<code>Flutter</code>，您可以开发适用于<code>Web</code>、<code>macOS</code>、<code>Windows</code>、<code>Linux</code>、<code>Android</code>、<code>iOS</code>以及嵌入式系统（例如，汽车中的信息娱乐系统）的应用。</p><p><code>Flutter 3</code>带来了真正的跨平台开发能力，<code>SDK</code>允许开发者在所有兼容平台之间共享代码。事实上，<code>Flutter 4</code>将专注于桌面应用的开发。另一方面，<code>Flutter</code>的最新版本<code>Flutter 3.7</code>通过在<code>iOS</code>上引入新的渲染引擎和背景处理改进等更新，提高了性能，并增强了开发工具、国际化和<code>Material 3</code>的支持。</p><h3 id="热重载" tabindex="-1"><a class="header-anchor" href="#热重载" aria-hidden="true">#</a> 热重载</h3><p>热重载是一个极为方便的功能，允许开发者重新加载应用并查看<code>UI</code>中的更改。</p><p><code>React Native</code>的热重载对应功能是快速刷新（<code>Fast Refresh</code>），其基本功能与<code>Flutter</code>的热重载相同。</p><p>这两种版本的热重载功能的缺点是，代码中的高级更改（例如，将无状态组件更改为有状态组件）无法进行热重载。复杂的更改需要重新编译应用。</p><h3 id="编程语言" tabindex="-1"><a class="header-anchor" href="#编程语言" aria-hidden="true">#</a> 编程语言</h3><p><code>Dart</code> 编程语言与 <code>Java/Kotlin (Android)</code> 非常相似，这使得来自原生移动开发的开发人员更容易学习。<code>JavaScript</code> 不太直观，因此更难掌握。</p><h3 id="material-design" tabindex="-1"><a class="header-anchor" href="#material-design" aria-hidden="true">#</a> <code>Material Design</code></h3><p><code>Flutter</code>内置对<code>Material Design</code>的支持。它直接集成在框架中，提供了一套丰富的<code>Material Design</code>组件。这意味着开发者可以轻松地在应用中实现<code>Material Design</code>的原则和组件，几乎不需要额外的努力。<code>Flutter</code>的<code>Material</code>组件设计上严格遵循<code>Google</code>的<code>Material Design</code>指南，使得在各个平台上创建外观一致、功能丰富的视觉吸引力应用变得非常简单。</p><p><code>React Native</code>并不内置<code>Material Design</code>组件，但可以通过第三方库来使用<code>Material Design</code>。其中一个流行的库是<code>react-native-paper</code>，它提供了与<code>React Native</code>兼容的多种<code>Material Design</code>组件。使用这些库，开发者可以在<code>React Native</code>应用中实现<code>Material Design</code>，但这需要额外的步骤来集成和维护这些外部依赖。</p><h2 id="谁在使用flutter" tabindex="-1"><a class="header-anchor" href="#谁在使用flutter" aria-hidden="true">#</a> 谁在使用<code>Flutter</code>？</h2><p><code>Flutter</code> 存在于公司的技术栈中，例如：</p><ul><li><code>Alibaba</code></li><li><code>BMW</code></li><li><code>eBay</code></li><li><code>Square</code></li><li><code>Groupon</code></li><li><code>CapitalOne</code></li></ul><h2 id="谁在使用-react-native" tabindex="-1"><a class="header-anchor" href="#谁在使用-react-native" aria-hidden="true">#</a> 谁在使用 <code>React Native</code>？</h2><p><code>React Native</code>为许多全球知名品牌提供支持：</p><ul><li><code>Uber Eats</code></li><li><code>Skype</code></li><li><code>Tesla</code></li><li><code>Coinbase</code></li><li><code>Instagram</code></li><li><code>Salesforce</code></li></ul><h2 id="使用flutter和react-native相对于原生开发的优势" tabindex="-1"><a class="header-anchor" href="#使用flutter和react-native相对于原生开发的优势" aria-hidden="true">#</a> 使用<code>Flutter</code>和<code>React Native</code>相对于原生开发的优势：</h2><p>对于不需要最新原生功能的应用，快速原型开发极为重要。使用<code>Swift（Apple iOS）</code>或<code>Kotlin（Android）</code>进行原生开发的时间较长且成本较高（需要为每个平台各组建一个团队）。<code>React Native</code>和<code>Flutter</code>能够支持初创公司快速构建原型和最小可行产品（<code>MVP</code>）。</p><p>热重载功能包含在<code>React Native</code>和<code>Flutter</code>中，能够让开发者快速反馈布局的变化——每当您进行更改时，可以在应用中查看更改后的效果，而无需重新编译应用。这大大加快了开发过程。</p><p><em>注意</em>：原生<code>Android</code>和<code>iOS</code>也支持热重载，但其功能相比<code>React Native</code>和<code>Flutter</code>的热重载要有限。</p><h2 id="使用-react-native-或-flutter-与原生应用程序开发的缺点" tabindex="-1"><a class="header-anchor" href="#使用-react-native-或-flutter-与原生应用程序开发的缺点" aria-hidden="true">#</a> 使用 <code>React Native</code> 或 <code>Flutter</code> 与原生应用程序开发的缺点</h2><p>尽管<code>React Native</code>和<code>Flutter</code>都是快速构建移动应用的优秀工具，但调整跨平台应用程序以适应操作系统更新时会有一定的开销（无论是<code>iOS</code>还是<code>Android</code>），而本地应用程序则会自动更新。</p><p>使用本地应用程序开发，实现出色的应用程序性能更加容易。尽管在<code>Flutter</code>或<code>React Native</code>中构建的<code>iOS</code>和<code>Android</code>应用程序的性能差异越来越不明显。</p><p>此外，在本地应用程序中实现完美的像素级设计更加简单。然而，这要求您分别为两个平台进行实现，从而增加了开发时间和成本。</p><p>另一方面，<code>Flutter</code>的组件（例如按钮或文本框）高度可配置，使您可以微调设计并实现完美的像素级别。</p><p>一些新功能在本地<code>iOS</code>和<code>Android</code>上可用，更容易在本地应用程序中实现。</p><h2 id="结论-react-native-比-flutter-好吗" tabindex="-1"><a class="header-anchor" href="#结论-react-native-比-flutter-好吗" aria-hidden="true">#</a> 结论：<code>React Native</code> 比 <code>Flutter</code> 好吗？</h2><p>长期以来，<code>CTO</code>们一直在问<code>React Native</code>比<code>Flutter</code>好在哪里，但这个问题的参数已经在一段时间内发生了转变。在熟练的开发者手中，<code>React Native</code>和<code>Flutter</code>都可以用来构建具有接近本地性能和外观的优秀应用程序。然而，<code>Flutter</code>在商业和专业开发者中的使用越来越多，这一趋势在全球范围内持续发展。</p><p>但是，选择任何一种技术时，你必须从更广泛的角度来看待它，而不仅仅是流行度或技术优缺点。</p><p>例如，在外包开发之后，你能否招到完整的<code>Flutter</code>开发团队来维护和发展你的应用程序？</p><p><code>Flutter</code>的温和学习曲线是一项宝贵的资产，当你需要开发者快速跳入项目时，<code>Flutter</code>的文档配合相对较容易的<code>Dart</code>肯定会有所帮助。</p><p>但是不要忘记，与<code>React Native</code>中极受欢迎的<code>JavaScript</code>相比，<code>Dart</code>不是非常流行的编程语言。因此，难以招募到熟练的<code>Flutter</code>开发人员。</p><p>此外，还有生态系统本身的问题。在<code>Flutter</code>中，您可以使用许多由<code>Google</code>官方开发的<code>SDK</code>（例如，移动端的<code>Google Ads SDK</code>）。</p><h2 id="flutter和react-native项目的开发者可用性" tabindex="-1"><a class="header-anchor" href="#flutter和react-native项目的开发者可用性" aria-hidden="true">#</a> <code>Flutter</code>和<code>React Native</code>项目的开发者可用性</h2><p><code>React Native</code>的需求与供应同样高，但<code>Flutter</code>的情况则不尽相同。选择<code>Flutter</code>的公司面临招聘问题，他们在寻找和留住能够为应用开发高质量代码的人才方面遇到了困难。</p><p><img src="https://raw.githubusercontent.com/chnjames/cloudImg/main/Images202410151717335.png" alt="recruitment"></p><p><em>查看2022年6月的Flutter和React Native开发者招聘信息（包括远程选项）</em></p><h2 id="flutter和react-native的最佳使用场景" tabindex="-1"><a class="header-anchor" href="#flutter和react-native的最佳使用场景" aria-hidden="true">#</a> <code>Flutter</code>和<code>React Native</code>的最佳使用场景</h2><p><code>React Native</code>和<code>Flutter</code>非常适合快速原型制作和简单的移动应用。然而，在构建企业级移动应用时，如果对像素完美的设计、一流的性能和即时实现原生功能有关键要求，那么原生开发可能是更好的选择。</p><p>这并不是说<code>Flutter</code>或<code>React Native</code>不能成功用于大型和复杂的应用程序。但您需要意识到，长期来看，这两种技术可能会产生一定的开销。</p><p>例如，在2019年，<code>Airbnb</code>由于<code>React Native</code>生态系统的不稳定、重现错误的困难以及需要为特定平台功能编写桥接代码，选择从<code>React Native</code>迁移到原生开发。</p><p>始终从广泛和长期的角度看待您想要纳入技术栈中的技术，充分分析权衡和收益。</p><h2 id="何时使用flutter" tabindex="-1"><a class="header-anchor" href="#何时使用flutter" aria-hidden="true">#</a> 何时使用<code>Flutter</code></h2><p><code>Flutter</code> 在以下情况下会很好地工作：</p><ul><li>您的预算较少（无需两个团队进行原生 <code>Android</code> 和 <code>iOS</code> 开发）</li><li>您需要快速发布产品（期限短）</li><li>您希望拥有像素完美的设计和组件来创建出色的 <code>UI</code></li><li>您需要为您的用户（桌面、移动、汽车信息娱乐）构建跨平台体验</li></ul><h2 id="何时使用-react-native" tabindex="-1"><a class="header-anchor" href="#何时使用-react-native" aria-hidden="true">#</a> 何时使用 <code>React Native</code></h2><p>在以下情况下使用 <code>React Native</code>：</p><ul><li>您有一个桌面应用或网站，可以重用组件用于移动应用（使用单一技术栈）</li><li>您有一支熟悉现有资源的<code>JavaScript</code>团队，可以使用庞大的<code>npm</code>库中的插件、模块和组件。</li><li>您需要尽快找到一支<code>React Native</code>开发者团队（目前<code>Flutter</code>开发者更难找到）。</li></ul><h2 id="常见问题解答" tabindex="-1"><a class="header-anchor" href="#常见问题解答" aria-hidden="true">#</a> 常见问题解答</h2><h3 id="flutter是否比react-native更快" tabindex="-1"><a class="header-anchor" href="#flutter是否比react-native更快" aria-hidden="true">#</a> <code>Flutter</code>是否比<code>React Native</code>更快？</h3><p>随着<code>React Native</code>架构（<code>JSI</code>）的变化，<code>React Native</code>在性能上逐渐接近<code>Flutter</code>。但<code>Flutter</code>应用仍然可能比<code>React Native</code>应用稍快（当然，这不一定是个问题，具体还要看您的产品类型和功能需求）。</p><h3 id="flutter是否比react-native更好" tabindex="-1"><a class="header-anchor" href="#flutter是否比react-native更好" aria-hidden="true">#</a> <code>Flutter</code>是否比<code>React Native</code>更好？</h3><p><code>Flutter</code>在<code>React Native</code>与<code>Flutter</code>的受欢迎程度竞争中逐渐领先，这主要是因为它被认为更易于使用。此外，<code>Flutter</code>的<code>GitHub</code>上报告的问题有更多的解决方案，而<code>React Native</code>则相对较少。然而，市场上<code>Flutter</code>开发者的稀缺是一个显著的缺点。因此，虽然<code>Flutter</code>相对于<code>React Native</code>有许多优势，但很难确定哪种技术更适合开发接近原生的移动应用。</p><h3 id="flutter在2024年是否已经准备好投入生产" tabindex="-1"><a class="header-anchor" href="#flutter在2024年是否已经准备好投入生产" aria-hidden="true">#</a> <code>Flutter</code>在2024年是否已经准备好投入生产？</h3><p><code>Flutter</code>早已准备好投入生产。实际上，该工具允许开发者从单一代码库构建桌面、移动和<code>Web</code>应用。</p><h3 id="flutter是原生还是混合框架" tabindex="-1"><a class="header-anchor" href="#flutter是原生还是混合框架" aria-hidden="true">#</a> <code>Flutter</code>是原生还是混合框架？</h3><p><code>Flutter</code>是一个用于开发具有原生<code>UI</code>组件的混合或跨平台移动应用的<code>SDK</code>。</p><h3 id="flutter是否支持ai" tabindex="-1"><a class="header-anchor" href="#flutter是否支持ai" aria-hidden="true">#</a> <code>Flutter</code>是否支持<code>AI</code>？</h3><p>是的，<code>Flutter</code>支持 <code>AI</code>，可以帮助开发者引入实时响应用户查询的自定义功能。实际上，有一个开源的<code>Mistral AI API</code>客户端为<code>Flutter</code>提供支持。此外，还有一份全面的逐步指南，展示了如何在移动应用中实现四种不同的人工智能使用案例。</p>',75);function Qe(Ze,$e){const o=i("ExternalLinkIcon");return r(),l("div",null,[s,e("p",null,[t("因此，"),e("a",h,[t("组件更新"),c(o)]),t("（例如，"),u,t("）对 "),p,t(" 应用程序没有任何影响，但对 "),_,t(" 应用程序有影响。")]),v,e("p",null,[e("em",null,[e("a",g,[t("2023年Stack Overflow调查"),c(o)]),t("中“其他框架和库”类别的最受欢迎技术，Flutter 领先于 React Native。")])]),f,e("p",null,[m,e("em",null,[t("全球 Flutter（红色）和 React Native（蓝色）流行趋势（2018-2024）。资料来源： "),e("a",F,[t("Google Trends"),c(o)])])]),N,e("p",null,[R,e("em",null,[t("美国 Flutter（红色）和 React Native（蓝色）流行趋势（2018-2024）。资料来源： "),e("a",b,[t("Google Trends"),c(o)])])]),S,e("p",null,[e("em",null,[t("中国 Flutter（红色）和 React Native（蓝色）流行趋势（2018-2024）。资料来源： "),e("a",I,[t("Google Trends"),c(o)])])]),x,e("p",null,[w,e("em",null,[t("2019 年至 2023 年间全球开发者对跨平台移动框架的受欢迎程度。来源： "),e("a",k,[t("Statista"),c(o)])])]),D,A,e("p",null,[e("em",null,[t("全球移动应用和游戏开发者使用的主要引擎（2022年7月）。来源："),e("a",O,[t("Statista"),c(o)])])]),J,e("p",null,[t("然后还有 "),j,t(" 框架本身。这并不是说 "),M,t(" 是一个糟糕的框架——实际上，"),e("a",G,[t("很多优秀的应用"),c(o)]),t("都在使用它。不过，如果对一些细微差别不熟悉，您可能会花费大量时间尝试解决配置开发环境时出现的问题。")]),E,e("p",null,[V,e("em",null,[e("a",q,[t("2022年Stack Overflow调查"),c(o)]),t("中“最受欢迎技术 — 其他框架和库”类别的结果。右侧的紫色部分表示那些认为某项技术是“最令人畏惧”的受访者。")])]),y,e("p",null,[t("设置 "),W,t(" 需要更多的经验。"),C,t(" 的入门指南没有提供足够的细节和帮助来启动项目。不过，"),U,t(" 有 "),T,t("。"),e("a",L,[K,c(o)]),t(" 是一套工具，可以大大简化构建 "),P,t(" 应用的过程。")]),B,e("p",null,[z,t(" 现在拥有一个新的桥接模块 "),e("a",H,[X,c(o)]),t("（"),Y,t(" 接口），使其在组件通信方面更快。"),Q,t(" 作为 "),Z,t(" 和原生层之间更高效的桥接，允许更快速的同步和更流畅的性能。这一架构改进使 "),$,t(" 在应用开发速度和用户界面的响应性上得到了提升，从而巩固了其在跨平台移动应用开发市场中的地位。")]),ee,e("p",null,[t("不过，"),te,t(" 有一个不错的调试工具——"),e("a",oe,[ce,c(o)]),t("。")]),de,e("p",null,[e("em",null,[ae,t(" 是一个用于调试移动应用的平台。"),re,t(" 提供了与"),le,t("、"),ie,t(" 代码和原生代码的开箱即用的集成。来源："),e("a",ne,[t("Flipper"),c(o)])])]),e("p",null,[t("在 "),se,t(" 中，借助支持 "),he,t(" 和 "),ue,t(" 的工具，调试变得更加容易。"),pe,t("（源自 "),_e,t(" 浏览器）和 "),ve,t(" 帮助开发者捕获和理解错误。此外，还有 "),e("a",ge,[fe,c(o)]),t(" 工具，允许开发者检查应用的视觉层以及其外观的原因。")]),me,e("p",null,[e("em",null,[t("Flutter Inspector用于调试视觉层。来源："),e("a",Fe,[t("Flutter"),c(o)])])]),Ne,e("p",null,[Re,t(" 的生态系统非常庞大，远超过 "),be,t("。这主要得益于 "),Se,t(" 包管理器（"),e("a",Ie,[xe,c(o)]),t("），这是一个包的存储库。"),we,t(" 上托管着超过200万个包。")]),ke,e("p",null,[De,t(" 的 "),e("a",Ae,[Oe,c(o)]),t(" 存储库是一个动态增长的存储库，但仍然较年轻，现成的解决方案数量相对较少。")]),Je,e("p",null,[t("截至 2024 年 10 月，"),je,t(" 有 "),e("a",Me,[t("751,000+"),c(o)]),t(" 个存储库结果，"),Ge,t(" 库有 "),e("a",Ee,[t("516,000+"),c(o)]),t(" 个。对于 "),Ve,t(" 来说，这个数字几乎翻了两番，因为在2022年，"),qe,t(" 只有241,632个包，而 "),ye,t(" 有232,168个包。不过，这两个生态系统在动画、状态管理和网络等方面都有丰富的包可供使用。")]),We,e("p",null,[Ce,Ue,t(),e("a",Te,[Le,c(o)])]),Ke,Pe,e("p",null,[Be,ze,t(),e("a",He,[Xe,c(o)])]),Ye])}const tt=a(n,[["render",Qe],["__file","FlutterVSRN2024.html.vue"]]);export{tt as default};
