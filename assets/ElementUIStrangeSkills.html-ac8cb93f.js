import{_ as e,p,q as o,s as n,R as s,t as c,Y as a,n as l}from"./framework-c56ab46b.js";const i={},u=a(`<h4 id="el-scrollbar滚动条" tabindex="-1"><a class="header-anchor" href="#el-scrollbar滚动条" aria-hidden="true">#</a> <code>el-scrollbar</code>滚动条</h4><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>可选值</th></tr></thead><tbody><tr><td><code>native</code></td><td><em>是否采用原生滚动。即只是隐藏原生滚动条，但并没有使用自定义的滚动条）</em></td><td><code>Boolean</code></td><td>-</td></tr><tr><td><code>wrapStyle</code></td><td><em>容器样式</em></td><td><code>Object</code></td><td>-</td></tr><tr><td><code>wrapClass</code></td><td><em>容器样式名</em></td><td><code>Object</code></td><td>-</td></tr><tr><td><code>viewClass</code></td><td><em>展示视图的样式名</em></td><td><code>Object</code></td><td>-</td></tr><tr><td><code>viewStyle</code></td><td><em>展示视图的样式</em></td><td><code>Object</code></td><td>-</td></tr><tr><td><code>noresize</code></td><td><em>容器大小是否不可变。如果 <code>container</code> 尺寸不会发生变化，最好设置它可以优化性能</em></td><td><code>Boolean</code></td><td>-</td></tr><tr><td><code>tag</code></td><td><em>渲染容器的标签</em>。<em><code>view</code>容器用那种标签渲染，默认为<code>div</code></em></td><td><code>String</code></td><td>-</td></tr></tbody></table><p><strong>自定义滚动条的原理</strong></p><p><img src="https://raw.githubusercontent.com/chnjames/cloudImg/main/blog/202309081552892.png" alt="scrollbar"></p><p><strong><code>warp</code></strong>：滚动的可显示区域，滚动内容就是在这个区域中滚动；</p><p><strong><code>view</code></strong>：实际的滚动内容，超出<code>warp</code>可显示区域的内容将被隐藏；</p><p><strong><code>track</code></strong>：滚动条的滚动滑块；</p><p><strong><code>thumb</code></strong>：上下滚动的轨迹。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-scrollbar</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user in userList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{user.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-scrollbar</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="管理弹出层的z-index-popupmanager" tabindex="-1"><a class="header-anchor" href="#管理弹出层的z-index-popupmanager" aria-hidden="true">#</a> 管理弹出层的<code>z-index</code>：<code>PopupManager</code></h4><p><code>ElementUI</code>的弹出层在元素定位上，都有两种实现方式，分别是：</p><ul><li><code>append-to-body</code>：此模式下，弹出层会被放在<code>&lt;body&gt;</code>元素上，通过<code>position: fixed</code>定位，配合动态的<code>top</code>和<code>left</code>属性，完成弹出元素的定位。</li><li>非<code>append-to-body</code>：此模式下，弹出层通过<code>position: absolute</code>定位，配合其父元素<code>position: relative</code>来完成弹出元素的定位。</li></ul><p>在大多数情况下，<code>ElementUI</code>都是默认使用<code>append-to-body</code>，因为非<code>append-to-body</code>存在严重副作用，只有迫不得已的情况下才需要使用。</p><p>具体有什么副作用，可以把你们的理解打在评论区。</p><blockquote><p><code>ElementUI</code>弹出层的核心实现机制： 只要让新出现的弹出层，永远比之前所有弹出层的层级要高，就不会有<strong>新弹层</strong>被<strong>旧弹层</strong>遮盖的事情发生。</p><p><code>PopupManager</code>：为弹出层提供获取实例、注册、注销等各种能力，但其最重要的能力，是提供了<code>z-index</code>的层级管理能力。</p><p><code>ElementUI</code>为其内置了一个弹出层<code>z-index</code>基数（<code>2000</code>），但可以进行修改。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 修改弹出层的\`z-index\`从3000开始递增</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Element<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">zIndex</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onClick<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>增加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
    z-index: {{ value }} 
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> PopupManager <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;element-ui/src/utils/popup&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 使用</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> PopupManager<span class="token punctuation">.</span><span class="token function">nextZIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实战：一个更灵活的全屏组件</strong></p><blockquote><p>众所周知，浏览器是有官方的全屏<code>API</code>的：<code>Element.requestFullscreen()</code>，它可以让一个元素立刻铺满视窗，并且置于所有元素之上。官方全屏是设定层级高于一切，那些<code>append-to-body</code>的弹窗，无论<code>z-index</code>多高，也绝对不会被显示出来。而那些非<code>append-to-body</code>模式的弹出层，确实会在某些业务场景不符合要求。</p></blockquote><p><strong>符合<code>ElementUI</code>层级标准的全屏组件</strong></p><blockquote><p>和浏览器官方<code>API</code>实现全屏的思路基本一致，但不同的地方在于：</p><ul><li>官方全屏会默认置顶，<code>z-index</code>无限大；</li><li>封装的全屏组件，<code>z-index</code>符合<code>PopupManager</code>管家的规范。</li></ul></blockquote><p><strong>简易<code>Demo</code></strong></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ &#39;custom-full-screen&#39;: isFullScreen }<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{zIndex: currentZIndex}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> PopupManager <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;element-ui/src/utils/popup&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">isFullScreen</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token literal-property property">currentZIndex</span><span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>isFullScreen <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>currentZIndex <span class="token operator">=</span> PopupManager<span class="token punctuation">.</span><span class="token function">nextZIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.custom-full-screen</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> fixed <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 0 <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 0 <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span> 0 <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span> 0 <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100% <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100% <span class="token important">!important</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="万能弹出组件-vue-popper" tabindex="-1"><a class="header-anchor" href="#万能弹出组件-vue-popper" aria-hidden="true">#</a> 万能弹出组件：<code>vue-popper</code></h4><blockquote><p><code>ElementUI</code>中的大部分弹出层都是基于<code>vue-popper</code>组件来实现的。比如<code>select</code>、<code>data-picker</code>、<code>cascader</code>、<code>dropdown</code>、<code>popver</code>、<code>tooltip</code>等。</p></blockquote><p>如何使用<code>vue-popper</code></p><p>通常来说，它的主要用法是<code>混入（mixins）</code>。</p>`,26),d={href:"https://github.com/ElemeFE/element/blob/dev/packages/select/src/select-dropdown.vue",target:"_blank",rel:"noopener noreferrer"},r=n("code",null,"ElementUI select-dropdown",-1),k=a(`<p><strong>实战：完全自定义的弹出层</strong></p><ol><li><p>引入<code>vue-popper</code>，在模板中引入该组件，并定义一个弹出层元素，一个定位元素。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 定位元素 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>custom-picker<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- vue-popper组件 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Popper</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>popper<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showPopper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Popper</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 弹出组件 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fly-piece<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showPopper<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>custom-picker__popper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>弹出内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// 引入vue-popper组件</span>
<span class="token keyword">import</span> Popper <span class="token keyword">from</span> <span class="token string">&#39;element-ui/src/utils/vue-popper&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    Popper
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// 双向绑定，控制弹出层是否弹出</span>
      <span class="token literal-property property">showPopper</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>给<code>vue-popper</code>实例指定<strong>弹出层</strong>和<strong>定位层</strong>。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>mounted() {
  this.$refs.popper.popperElm = this.$refs[&#39;fly-piece&#39;];
  this.$refs.popper.referenceElm = this.$el;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过控制<code>vue-popper</code>的<code>props.value</code>来控制是否弹出。</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>this.showPopper = !this.showPopper
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p><em><code>2023.10.08</code>更新~</em></p><hr><h4 id="clickoutside" tabindex="-1"><a class="header-anchor" href="#clickoutside" aria-hidden="true">#</a> <code>ClickOutside</code></h4><blockquote><p><code>ClickOutside</code>是<code>ElementUI</code>实现的一个自定义指令，顾名思义，就是点击元素外面才会触发的事件。<code>ElementUI</code>中的<code>select</code>、<code>dropdown</code>、<code>popver</code>等组件都用到该指令。</p><p><code>ClickOutside</code></p></blockquote><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-clickoutside</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleClose<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flag<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> Clickoutside <span class="token keyword">from</span> <span class="token string">&quot;element-ui/src/utils/clickoutside&quot;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">flag</span><span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">directives</span><span class="token operator">:</span> <span class="token punctuation">{</span> Clickoutside <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">handleClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>    
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/chnjames/cloudImg/main/blog/202310081637614.gif" alt="GIF 8-10-2023"></p><p>通过掌握这些高级技巧和窍门，你可以更好地定制和优化<code>ElementUI</code>应用程序，提供更出色的用户体验和更灵活的界面交互。还有没有发现<code>ElementUI</code>中更好玩的内容，发出来大家学习学习。</p>`,9);function v(m,g){const t=l("ExternalLinkIcon");return p(),o("div",null,[u,n("blockquote",null,[n("p",null,[s("可以"),n("a",d,[s("参考"),c(t)]),r,s("中对它的具体使用。")])]),k])}const h=e(i,[["render",v],["__file","ElementUIStrangeSkills.html.vue"]]);export{h as default};
