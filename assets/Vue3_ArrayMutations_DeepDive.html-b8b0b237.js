import{_ as n,p as s,q as a,Y as p}from"./framework-c56ab46b.js";const e={},t=p(`<p><code>Vue 3</code> 使用 <code>Proxy</code> 来侦测响应式对象的变化，数组作为常用数据类型，自然也被 <code>Vue 3</code> 自动侦测和管理。在处理数组时，了解哪些操作会修改原数组，哪些操作不会修改原数组，对高效编写 <code>Vue</code> 应用程序至关重要。</p><p>本文将详细介绍 <code>Vue 3</code> 中的常见数组操作，并按照是否会修改原数组进行分类说明。</p><hr><h3 id="一、会修改原数组的方法" tabindex="-1"><a class="header-anchor" href="#一、会修改原数组的方法" aria-hidden="true">#</a> 一、会修改原数组的方法</h3><p>这些方法会直接改变原数组的内容，因此 <code>Vue 3</code> 的响应式系统能检测到这些变更，并自动触发相关的视图更新。</p><h4 id="_1-push" tabindex="-1"><a class="header-anchor" href="#_1-push" aria-hidden="true">#</a> 1. <code>push()</code></h4><ul><li><p><strong>功能</strong>：向数组末尾添加一个或多个元素。</p></li><li><p><strong>返回值</strong>：新数组的长度。</p></li><li><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组变为 [1, 2, 3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-pop" tabindex="-1"><a class="header-anchor" href="#_2-pop" aria-hidden="true">#</a> 2. <code>pop()</code></h4><ul><li><p><strong>功能</strong>：移除数组末尾的一个元素。</p></li><li><p><strong>返回值</strong>：被移除的元素。</p></li><li><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组变为 [1, 2]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-shift" tabindex="-1"><a class="header-anchor" href="#_3-shift" aria-hidden="true">#</a> 3. <code>shift()</code></h4><ul><li><p><strong>功能</strong>：移除数组开头的一个元素。</p></li><li><p><strong>返回值</strong>：被移除的元素。</p></li><li><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组变为 [2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_4-unshift" tabindex="-1"><a class="header-anchor" href="#_4-unshift" aria-hidden="true">#</a> 4. <code>unshift()</code></h4><ul><li><p><strong>功能</strong>：在数组开头添加一个或多个元素。</p></li><li><p><strong>返回值</strong>：新数组的长度。</p></li><li><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组变为 [0, 1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_5-splice" tabindex="-1"><a class="header-anchor" href="#_5-splice" aria-hidden="true">#</a> 5. <code>splice()</code></h4><ul><li><p><strong>功能</strong>：在数组中添加、删除或替换元素。</p></li><li><p><strong>返回值</strong>：被删除的元素（如果有）。</p></li><li><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除索引 1 开始的两个元素，数组变为 [1, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_6-sort" tabindex="-1"><a class="header-anchor" href="#_6-sort" aria-hidden="true">#</a> 6. <code>sort()</code></h4><ul><li><p><strong>功能</strong>：对数组元素进行原地排序。</p></li><li><p><strong>返回值</strong>：排序后的数组。</p></li><li><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组排序后为 [1, 2, 3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_7-reverse" tabindex="-1"><a class="header-anchor" href="#_7-reverse" aria-hidden="true">#</a> 7. <code>reverse()</code></h4><ul><li><p><strong>功能</strong>：颠倒数组元素的顺序。</p></li><li><p><strong>返回值</strong>：颠倒后的数组。</p></li><li><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组变为 [3, 2, 1]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="二、不会修改原数组的方法" tabindex="-1"><a class="header-anchor" href="#二、不会修改原数组的方法" aria-hidden="true">#</a> 二、不会修改原数组的方法</h3><p>这些方法不会直接修改原数组，而是返回一个新的数组或值。因此，<code>Vue 3</code> 响应式系统不会通过这些方法本身侦测到数组的变化，但如果将它们的返回值重新赋值给响应式对象，<code>Vue</code> 仍然能侦测到变更并更新视图。</p><h4 id="_1-concat" tabindex="-1"><a class="header-anchor" href="#_1-concat" aria-hidden="true">#</a> 1. <code>concat()</code></h4><ul><li><p><strong>功能</strong>：合并两个或多个数组，返回一个新数组。</p></li><li><p><strong>返回值</strong>：合并后的新数组。</p></li><li><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新数组为 [1, 2, 3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-slice" tabindex="-1"><a class="header-anchor" href="#_2-slice" aria-hidden="true">#</a> 2. <code>slice()</code></h4><ul><li><p><strong>功能</strong>：返回数组中指定范围的浅拷贝片段，不修改原数组。</p></li><li><p><strong>返回值</strong>：新数组。</p></li><li><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> slicedArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新数组为 [2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-map" tabindex="-1"><a class="header-anchor" href="#_3-map" aria-hidden="true">#</a> 3. <code>map()</code></h4><ul><li><p><strong>功能</strong>：对数组中的每个元素执行回调函数，返回一个新数组。</p></li><li><p><strong>返回值</strong>：经过回调函数处理后的新数组。</p></li><li><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mappedArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新数组为 [2, 4, 6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_4-filter" tabindex="-1"><a class="header-anchor" href="#_4-filter" aria-hidden="true">#</a> 4. <code>filter()</code></h4><ul><li><p><strong>功能</strong>：返回满足条件的元素组成的新数组。</p></li><li><p><strong>返回值</strong>：筛选后的新数组。</p></li><li><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> filteredArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新数组为 [3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_5-reduce-和-reduceright" tabindex="-1"><a class="header-anchor" href="#_5-reduce-和-reduceright" aria-hidden="true">#</a> 5. <code>reduce()</code> 和 <code>reduceRight()</code></h4><ul><li><p><strong>功能</strong>：对数组中的每个元素执行回调函数，最终返回一个累积结果。</p></li><li><p><strong>返回值</strong>：累积结果。</p></li><li><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回累积值 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_6-flat-和-flatmap" tabindex="-1"><a class="header-anchor" href="#_6-flat-和-flatmap" aria-hidden="true">#</a> 6. <code>flat()</code> 和 <code>flatMap()</code></h4><ul><li><p><strong>功能</strong>：返回一个扁平化后的新数组。</p></li><li><p><strong>返回值</strong>：新数组。</p></li><li><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> flattenedArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新数组为 [1, 2, 3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_7-find-和-findindex" tabindex="-1"><a class="header-anchor" href="#_7-find-和-findindex" aria-hidden="true">#</a> 7. <code>find()</code> 和 <code>findIndex()</code></h4><ul><li><p><strong>功能</strong>：<code>find()</code> 返回第一个满足条件的元素，<code>findIndex()</code> 返回满足条件元素的索引。</p></li><li><p><strong>返回值</strong>：<code>find()</code> 返回元素，<code>findIndex()</code> 返回索引。</p></li><li><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> foundItem <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="三、vue-3-数组侦测的注意事项" tabindex="-1"><a class="header-anchor" href="#三、vue-3-数组侦测的注意事项" aria-hidden="true">#</a> 三、Vue 3 数组侦测的注意事项</h3><ol><li><p><strong>自动侦测修改</strong>：对于会修改原数组的方法（如 <code>push()</code>、<code>splice()</code> 等），<code>Vue 3</code> 能够自动侦测到这些操作并触发视图更新。</p></li><li><p><strong>不会修改原数组的操作</strong>：虽然这些方法不会修改原数组，但如果你将它们的返回值重新赋值给响应式对象，<code>Vue</code> 依然会检测到变化并更新视图。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Vue 会检测到重新赋值并触发更新</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>对象属性变化侦测</strong>：如果数组中包含对象，<code>Vue 3</code> 也能侦测到对象属性的变化。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Eve&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Vue 会侦测到对象属性的变化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h3 id="四、总结" tabindex="-1"><a class="header-anchor" href="#四、总结" aria-hidden="true">#</a> 四、总结</h3><ul><li><strong>会修改原数组的方法</strong>：<code>push()</code>，<code>pop()</code>，<code>shift()</code>，<code>unshift()</code>，<code>splice()</code>，<code>sort()</code>，<code>reverse()</code>。</li><li><strong>不会修改原数组的方法</strong>：<code>concat()</code>，<code>slice()</code>，<code>map()</code>，<code>filter()</code>，<code>reduce()</code>，<code>flat()</code>，<code>find()</code> 等。</li></ul><p>通过区分这些数组操作，你可以更好地控制 <code>Vue 3</code> 的响应式系统行为，确保数据变更时视图能够正确更新。如果需要保留原数组不变，可以选择不会修改原数组的方法，并将返回的新数组赋值回响应式对象。</p>`,43),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","Vue3_ArrayMutations_DeepDive.html.vue"]]);export{r as default};
